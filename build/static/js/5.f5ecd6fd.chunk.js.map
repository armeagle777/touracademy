{"version":3,"sources":["components/PasswordInput.js","views/auth/Login/Login.js","views/auth/Login/LoginContainer.js","views/auth/Login/index.js"],"names":["PasswordInput","props","useState","hidden","setHidden","className","type","onClick","error","Yup","object","string","ref","initialValues","email","password","validationSchema","shape","required","min","Login","login","history","isLoading","setLoading","handleSubmit","values","a","push","iziToast","title","position","message","to","Logo","width","onSubmit","handleChange","errors","touched","htmlFor","id","name","placeholder","onChange","value","disabled","mapDispatchToProps","connect"],"mappings":"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","file":"static/js/5.f5ecd6fd.chunk.js","sourcesContent":["import React, { useState } from \"react\"\n\nconst PasswordInput = (props) => {\n  const [hidden, setHidden] = useState(true)\n\n  return (\n    <div className=\"input-group input-group-merge\">\n      <input type={hidden ? \"password\" : \"text\"} {...props} />\n      <div className={`input-group-append ${hidden ? \"\" : \"show-password\"}`}>\n        <div className=\"input-group-text\" onClick={() => setHidden(!hidden)}>\n          <span className=\"password-eye\"></span>\n        </div>\n      </div>\n      {props.error && <div className=\"invalid-feedback\">{props.error}</div>}\n    </div>\n  )\n}\n\nexport default PasswordInput\n","import React, { useState } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { Formik } from \"formik\"\nimport iziToast from \"izitoast\"\n\nimport object from \"yup/lib/object\"\nimport string from \"yup/lib/string\"\n\nimport PasswordInput from \"components/PasswordInput\"\nimport Logo from \"components/Logo\"\n\nconst Yup = {\n  object,\n  string,\n  ref: () => {},\n}\n\nconst initialValues = {\n  email: \"\",\n  password: \"\",\n}\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .email(\"Please enter the valid email\")\n    .required(\"Email is required\"),\n  password: Yup.string()\n    .min(8, \"Password must be at least 8 characters long\")\n    .required(\"Password is required\"),\n})\n\nconst Login = ({ login, history }) => {\n  const [isLoading, setLoading] = useState(false)\n\n  const handleSubmit = async (values) => {\n    const { email, password } = values\n    setLoading(true)\n\n    try {\n      await login(email, password)\n      setLoading(false)\n      history.push(\"/app\")\n    } catch (err) {\n      iziToast.error({\n        title: \"Error\",\n        position: \"topRight\",\n        message: \"Email or Password is invalid.\",\n      })\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"default-layout\">\n      <div className=\"page-container account-page pt-5 pb-5\">\n        <div className=\"container\">\n          <div className=\"row justify-content-center\">\n            <div className=\"col-md-8 col-lg-6 col-xl-5\">\n              <div className=\"card bg-pattern\">\n                <div className=\"card-body p-4\">\n                  <div className=\"text-center w-75 m-auto\">\n                    <div className=\"auth-logo\">\n                      <Link to=\"/\" className=\"logo logo-dark text-center\">\n                        <Logo width=\"120\" />\n                      </Link>\n                    </div>\n                    <p className=\"text-muted mb-4 mt-3\">\n                      Enter your email address and password to access your dashboard.\n                    </p>\n                  </div>\n                  <Formik\n                    initialValues={initialValues}\n                    onSubmit={handleSubmit}\n                    validationSchema={validationSchema}\n                  >\n                    {({ handleSubmit, handleChange, values, errors, touched }) => (\n                      <form onSubmit={handleSubmit}>\n                        <div className=\"form-group mb-3\">\n                          <label htmlFor=\"emailaddress\">Email address</label>\n                          <input\n                            type=\"text\"\n                            id=\"emailaddress\"\n                            name=\"email\"\n                            placeholder=\"Enter your email\"\n                            onChange={handleChange}\n                            value={values.email}\n                            className={\n                              errors.email && touched.email\n                                ? \"is-invalid form-control\"\n                                : \"form-control\"\n                            }\n                          />\n                          {errors.email && touched.email && (\n                            <div className=\"invalid-feedback\">{errors.email}</div>\n                          )}\n                        </div>\n\n                        <div className=\"form-group mb-3\">\n                          <label htmlFor=\"password\">Password</label>\n                          <PasswordInput\n                            id=\"password\"\n                            name=\"password\"\n                            placeholder=\"Enter your password\"\n                            onChange={handleChange}\n                            className={\n                              errors.password && touched.password\n                                ? \"is-invalid form-control\"\n                                : \"form-control\"\n                            }\n                            error={\n                              errors.password && touched.password\n                                ? errors.password\n                                : null\n                            }\n                          />\n                        </div>\n\n                        <div className=\"form-group mb-3\">\n                          <div className=\"custom-control custom-checkbox\">\n                            <input\n                              type=\"checkbox\"\n                              className=\"custom-control-input\"\n                              id=\"checkbox-signin\"\n                            />\n                            <label\n                              className=\"custom-control-label\"\n                              htmlFor=\"checkbox-signin\"\n                            >\n                              Remember me\n                            </label>\n                          </div>\n                        </div>\n\n                        <div className=\"form-group mb-0 text-center\">\n                          <button\n                            className=\"btn btn-primary btn-block\"\n                            type=\"submit\"\n                            disabled={isLoading}\n                          >\n                            {isLoading && (\n                              <span className=\"spinner-border spinner-border-sm mr-1\" />\n                            )}{\" \"}\n                            Sign In{\" \"}\n                          </button>\n                        </div>\n                      </form>\n                    )}\n                  </Formik>\n                </div>\n              </div>\n\n              <div className=\"row mt-3\">\n                <div className=\"col-12 text-center\">\n                  <p>\n                    <Link to=\"/forgot-password\" className=\"ml-1 text-white-50\">\n                      Forgot your password?\n                    </Link>\n                  </p>\n                  <p className=\"text-white-50\">\n                    Don't have an account?{\" \"}\n                    <Link to={\"/register\"} className=\"ml-1 text-white\">\n                      <b>Sign Up</b>\n                    </Link>\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n","import { connect } from \"react-redux\"\nimport Login from \"./Login\"\nimport { login } from \"actions/auth\"\n\nconst mapStateToProps = () => {\n  return {}\n}\n\nconst mapDispatchToProps = {\n  login,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)\n","export { default } from \"./LoginContainer\"\n"],"sourceRoot":""}