{"version":3,"sources":["components/PasswordInput.js","views/auth/Register/Register.js","views/auth/Register/RegisterContainer.js","views/auth/Register/index.js"],"names":["PasswordInput","props","useState","hidden","setHidden","className","type","onClick","error","Yup","object","string","ref","initialValues","first_name","last_name","email","password1","password2","Register","register","history","isLoading","setLoading","password","setPassword","handleSubmit","values","a","iziToast","success","title","position","message","push","validationSchema","shape","required","min","when","is","val","length","then","oneOf","to","Logo","width","onSubmit","handleChange","errors","touched","htmlFor","id","name","placeholder","onChange","value","e","target","disabled","mapDispatchToProps","connect"],"mappings":"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","file":"static/js/6.980c31c3.chunk.js","sourcesContent":["import React, { useState } from \"react\"\n\nconst PasswordInput = (props) => {\n  const [hidden, setHidden] = useState(true)\n\n  return (\n    <div className=\"input-group input-group-merge\">\n      <input type={hidden ? \"password\" : \"text\"} {...props} />\n      <div className={`input-group-append ${hidden ? \"\" : \"show-password\"}`}>\n        <div className=\"input-group-text\" onClick={() => setHidden(!hidden)}>\n          <span className=\"password-eye\"></span>\n        </div>\n      </div>\n      {props.error && <div className=\"invalid-feedback\">{props.error}</div>}\n    </div>\n  )\n}\n\nexport default PasswordInput\n","import React, { useState } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { Formik } from \"formik\"\nimport iziToast from \"izitoast\"\n\nimport object from \"yup/lib/object\"\nimport string from \"yup/lib/string\"\n\nimport PasswordInput from \"components/PasswordInput\"\nimport Logo from \"components/Logo\"\n\nconst Yup = {\n  object,\n  string,\n  ref: () => {},\n}\n\nconst initialValues = {\n  first_name: \"\",\n  last_name: \"\",\n  email: \"\",\n  password1: \"\",\n  password2: \"\",\n}\n\nconst Register = ({ register, history }) => {\n  const [isLoading, setLoading] = useState(false)\n  const [password, setPassword] = useState(\"\")\n\n  const handleSubmit = async (values) => {\n    setLoading(true)\n\n    try {\n      await register(values)\n      setLoading(false)\n      iziToast.success({\n        title: \"Success\",\n        position: \"topRight\",\n        message: \"You are successfully registered! Please login to access your dashboard.\",\n      })\n      history.push(\"/login\")\n    } catch (err) {\n      iziToast.error({\n        title: \"Error\",\n        position: \"topRight\",\n        message: \"Register failed!\",\n      })\n      setLoading(false)\n    }\n  }\n\n\n  const validationSchema = Yup.object().shape({\n    first_name: Yup.string().required(\"First name is required\"),\n    last_name: Yup.string().required(\"Last name is required\"),\n    email: Yup.string()\n      .email(\"Please enter the valid email\")\n      .required(\"Email is required\"),\n    password1: Yup.string()\n      .min(8, \"Password must be at least 8 characters long\")\n      .required(\"Password is required\"),\n    password2: Yup.string()\n      .required(\"Confirm your password\")\n      .when(\"password1\", {\n        is: (val) => val && val.length > 0,\n        then: Yup.string().oneOf([password], \"Both password need to be the same\"),\n      }),\n  })\n\n  return (\n    <div className=\"default-layout\">\n      <div className=\"page-container account-page pt-3 pb-3\">\n        <div className=\"container\">\n          <div className=\"row justify-content-center\">\n            <div className=\"col-md-8 col-lg-6 col-xl-5\">\n              <div className=\"card bg-pattern\">\n                <div className=\"card-body p-4\">\n                  <div className=\"text-center w-75 m-auto\">\n                    <div className=\"auth-logo\">\n                      <Link to=\"/\" className=\"logo logo-dark text-center\">\n                        <Logo width=\"120\" />\n                      </Link>\n                    </div>\n                    <p className=\"text-muted mb-4 mt-3\">\n                      Don't have an account? Create your account, it takes less than a\n                      minute\n                    </p>\n                  </div>\n                  <Formik\n                    initialValues={initialValues}\n                    onSubmit={handleSubmit}\n                    validationSchema={validationSchema}\n                  >\n                    {({ handleSubmit, handleChange, values, errors, touched }) => (\n                      <form onSubmit={handleSubmit}>\n                        <div className=\"row\">\n                          <div className=\"col-lg-6\">\n                            <div className=\"form-group mb-2\">\n                              <label htmlFor=\"first_name\">First Name</label>\n                              <input\n                                type=\"text\"\n                                id=\"first_name\"\n                                name=\"first_name\"\n                                placeholder=\"Enter your name\"\n                                onChange={handleChange}\n                                value={values.first_name}\n                                className={\n                                  errors.first_name && touched.first_name\n                                    ? \"is-invalid form-control\"\n                                    : \"form-control\"\n                                }\n                              />\n                              {errors.first_name && touched.first_name && (\n                                <div className=\"invalid-feedback\">{errors.first_name}</div>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"col-lg-6\">\n                            <div className=\"form-group mb-2\">\n                              <label htmlFor=\"last_name\">Last Name</label>\n                              <input\n                                type=\"text\"\n                                id=\"last_name\"\n                                name=\"last_name\"\n                                placeholder=\"Enter your name\"\n                                onChange={handleChange}\n                                value={values.last_name}\n                                className={\n                                  errors.last_name && touched.last_name\n                                    ? \"is-invalid form-control\"\n                                    : \"form-control\"\n                                }\n                              />\n                              {errors.last_name && touched.last_name && (\n                                <div className=\"invalid-feedback\">{errors.last_name}</div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                          \n                        <div className=\"form-group mb-2\">\n                          <label htmlFor=\"emailaddress\">Email address</label>\n                          <input\n                            type=\"text\"\n                            id=\"emailaddress\"\n                            name=\"email\"\n                            placeholder=\"Enter your email\"\n                            onChange={handleChange}\n                            value={values.email}\n                            className={\n                              errors.email && touched.email\n                                ? \"is-invalid form-control\"\n                                : \"form-control\"\n                            }\n                          />\n                          {errors.email && touched.email && (\n                            <div className=\"invalid-feedback\">{errors.email}</div>\n                          )}\n                        </div>\n\n                        <div className=\"form-group mb-3\">\n                          <label htmlFor=\"password1\">Password</label>\n                          <PasswordInput\n                            id=\"password1\"\n                            name=\"password1\"\n                            placeholder=\"Enter your password\"\n                            onChange={(e) => {\n                              handleChange(e)\n                              setPassword(e.target.value)\n                            }}\n                            className={\n                              errors.password1 && touched.password1\n                                ? \"is-invalid form-control\"\n                                : \"form-control\"\n                            }\n                            error={\n                              errors.password1 && touched.password1\n                                ? errors.password1\n                                : null\n                            }\n                          />\n                        </div>\n                        <div className=\"form-group mb-3\">\n                          <label htmlFor=\"password2\">Confirm Password</label>\n                          <PasswordInput\n                            id=\"password2\"\n                            name=\"password2\"\n                            placeholder=\"Enter your password\"\n                            onChange={handleChange}\n                            className={\n                              errors.password2 && touched.password2\n                                ? \"is-invalid form-control\"\n                                : \"form-control\"\n                            }\n                            error={\n                              errors.password2 && touched.password2\n                                ? errors.password2\n                                : null\n                            }\n                          />\n                        </div>\n\n                        <div className=\"form-group mb-3\">\n                          <div className=\"custom-control custom-checkbox\">\n                            <input\n                              type=\"checkbox\"\n                              className=\"custom-control-input\"\n                              id=\"checkbox-signin\"\n                            />\n                            <label\n                              className=\"custom-control-label\"\n                              htmlFor=\"checkbox-signin\"\n                            >\n                              I accept <b>Terms and Conditions</b>\n                            </label>\n                          </div>\n                        </div>\n\n                        <div className=\"form-group mb-0 text-center\">\n                          <button\n                            className=\"btn btn-success btn-block\"\n                            type=\"submit\"\n                            disabled={isLoading}\n                          >\n                            {isLoading && (\n                              <span className=\"spinner-border spinner-border-sm mr-1\" />\n                            )}{\" \"}\n                            Sign Up\n                          </button>\n                        </div>\n                      </form>\n                    )}\n                  </Formik>\n                </div>\n              </div>\n\n              <div className=\"row mt-3\">\n                <div className=\"col-12 text-center\">\n                  <p className=\"text-white-50\">\n                    Already have account?{\" \"}\n                    <Link to={\"/login\"} className=\"ml-1 text-white\">\n                      <b>Sign In</b>\n                    </Link>\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Register\n","import { connect } from \"react-redux\"\nimport Register from \"./Register\"\nimport { register } from \"actions/auth\"\n\nconst mapStateToProps = () => {\n  return {}\n}\n\nconst mapDispatchToProps = {\n  register,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register)\n","export { default } from \"./RegisterContainer\"\n"],"sourceRoot":""}